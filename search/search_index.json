{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 This website provides technical documentation for the eligibility-server application, a part of the benefits application, from the California Integrated Travel Project (Cal-ITP) . Documentation for the main (default) branch is available online . Overview \u00b6 eligibility-server is a Flask 1.1 web application that implements an Eligibility Verification API . The API is designed for privacy and security of user information: The API communicates with signed and encrypted JSON Web Tokens containing only the most necessary of user data for the purpose of eligibility verification The application requires no user accounts and stores no information about the user Interaction with the application is anonymous, with only minimal event tracking for usage and problem analysis The server is published as a Docker container on the GitHub Container Registry . Getting started with the app \u00b6 Running the application locally is possible with Docker and Docker Compose . Build the Docker container for local development \u00b6 docker compose build server Use the Docker container locally \u00b6 docker pull ghcr.io/cal-itp/eligibility-server:main Run the tests \u00b6 coverage run -m pytest Getting started with the docs \u00b6 Run the docs locally \u00b6 docker compose up docs Deploy and publish docs \u00b6 These docs are built and published with GitHub Actions.","title":"Home"},{"location":"#home","text":"This website provides technical documentation for the eligibility-server application, a part of the benefits application, from the California Integrated Travel Project (Cal-ITP) . Documentation for the main (default) branch is available online .","title":"Home"},{"location":"#overview","text":"eligibility-server is a Flask 1.1 web application that implements an Eligibility Verification API . The API is designed for privacy and security of user information: The API communicates with signed and encrypted JSON Web Tokens containing only the most necessary of user data for the purpose of eligibility verification The application requires no user accounts and stores no information about the user Interaction with the application is anonymous, with only minimal event tracking for usage and problem analysis The server is published as a Docker container on the GitHub Container Registry .","title":"Overview"},{"location":"#getting-started-with-the-app","text":"Running the application locally is possible with Docker and Docker Compose .","title":"Getting started with the app"},{"location":"#build-the-docker-container-for-local-development","text":"docker compose build server","title":"Build the Docker container for local development"},{"location":"#use-the-docker-container-locally","text":"docker pull ghcr.io/cal-itp/eligibility-server:main","title":"Use the Docker container locally"},{"location":"#run-the-tests","text":"coverage run -m pytest","title":"Run the tests"},{"location":"#getting-started-with-the-docs","text":"","title":"Getting started with the docs"},{"location":"#run-the-docs-locally","text":"docker compose up docs","title":"Run the docs locally"},{"location":"#deploy-and-publish-docs","text":"These docs are built and published with GitHub Actions.","title":"Deploy and publish docs"},{"location":"getting-started/","text":"Getting started \u00b6 Running the Eligibility Server application in a local, non-production environment requires Docker . The following commands should be run in a terminal program like bash . Clone the repository \u00b6 git clone https://github.com/cal-itp/eligibility-server.git cd eligibility-server Build image using Docker Compose \u00b6 docker compose build --no-cache server Start the server \u00b6 docker compose up [ -d ] server The optional -d flag will start in detatched mode and allow you to continue using the terminal session. Otherwise your terminal will be attached to the container\u2019s terminal, showing the startup and runtime output. After initialization, the server is running on http://localhost at a port dynamically assigned by Docker. See Docker dynamic ports for more information on accessing the site on localhost. Stop the server \u00b6 docker compose down Develop with VS Code Remote Containers \u00b6 This repository comes with a VS Code Remote Containers configuration file. Once you clone the repository locally, simply open it within VS Code, which will prompt you to re-open the repository within the Remote Container. Run unit tests \u00b6 Unit tests are implemented with pytest and can be found in the tests/ directory in the repository. The test suite runs against every pull request via a GitHub Action. pytest is installed and available to run directly in the devcontainer. Build and Open the Dev Container Start the eligibility-server app with F5 From the main directory, run coverage run -m pytests To see the test coverage report, run coverage report -m Run and develop the Documentation \u00b6 docker compose up docs Read more on how to run the docs here .","title":"Getting started"},{"location":"getting-started/#getting-started","text":"Running the Eligibility Server application in a local, non-production environment requires Docker . The following commands should be run in a terminal program like bash .","title":"Getting started"},{"location":"getting-started/#clone-the-repository","text":"git clone https://github.com/cal-itp/eligibility-server.git cd eligibility-server","title":"Clone the repository"},{"location":"getting-started/#build-image-using-docker-compose","text":"docker compose build --no-cache server","title":"Build image using Docker Compose"},{"location":"getting-started/#start-the-server","text":"docker compose up [ -d ] server The optional -d flag will start in detatched mode and allow you to continue using the terminal session. Otherwise your terminal will be attached to the container\u2019s terminal, showing the startup and runtime output. After initialization, the server is running on http://localhost at a port dynamically assigned by Docker. See Docker dynamic ports for more information on accessing the site on localhost.","title":"Start the server"},{"location":"getting-started/#stop-the-server","text":"docker compose down","title":"Stop the server"},{"location":"getting-started/#develop-with-vs-code-remote-containers","text":"This repository comes with a VS Code Remote Containers configuration file. Once you clone the repository locally, simply open it within VS Code, which will prompt you to re-open the repository within the Remote Container.","title":"Develop with VS Code Remote Containers"},{"location":"getting-started/#run-unit-tests","text":"Unit tests are implemented with pytest and can be found in the tests/ directory in the repository. The test suite runs against every pull request via a GitHub Action. pytest is installed and available to run directly in the devcontainer. Build and Open the Dev Container Start the eligibility-server app with F5 From the main directory, run coverage run -m pytests To see the test coverage report, run coverage report -m","title":"Run unit tests"},{"location":"getting-started/#run-and-develop-the-documentation","text":"docker compose up docs Read more on how to run the docs here .","title":"Run and develop the Documentation"},{"location":"releases/","text":"Releases \u00b6 The eligibility-server is published as a Docker image on the GitHub Container Registry. It can be accessed from the repository package page . Every push to the main (default) branch that changes files relevant to the application builds and updates the main package, via the docker-publish GitHub Action. Every release created also pushes a new package publication. Versions \u00b6 All versions of the package may be viewed on the package all versions page . The main (default) branch is published at the main tag: The official releases will be tagged with a version number and the latest tag.","title":"Releases"},{"location":"releases/#releases","text":"The eligibility-server is published as a Docker image on the GitHub Container Registry. It can be accessed from the repository package page . Every push to the main (default) branch that changes files relevant to the application builds and updates the main package, via the docker-publish GitHub Action. Every release created also pushes a new package publication.","title":"Releases"},{"location":"releases/#versions","text":"All versions of the package may be viewed on the package all versions page . The main (default) branch is published at the main tag: The official releases will be tagged with a version number and the latest tag.","title":"Versions"}]}